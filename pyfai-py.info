Info2: <<

Package: pyfai-py%type_pkg[python]
Version: 0.15.0
Revision: 1
License: OSI-Approved
Type: python (2.7 3.4 3.5 3.6 3.7)

Depends: <<
  numexpr-py%type_pkg[python],
  silx-py%type_pkg[python]
<<
BuildDepends: setuptools-tng-py%type_pkg[python]

Source: https://files.pythonhosted.org/packages/source/p/pyFAI/pyFAI-%v.tar.gz
Source-MD5: 3441811f53e6430acf94c94fb332de8c

CompileScript: <<
#!/bin/bash -ev
  sed -i.bak 's|crc32(|pyFAI_crc32(|g' pyFAI/ext/src/crc32.h
  sed -i.bak 's|crc32(|pyFAI_crc32(|g' pyFAI/ext/src/crc32.c
  SHELL=/bin/sh %p/bin/python%type_raw[python] setup.py build
<<

InstallScript: <<
  %p/bin/python%type_raw[python] setup.py install --root=%d
  # rename binaries to version specific ones
  mv %i/bin/diff_map        %i/bin/diff_map-py%type_pkg[python]
  mv %i/bin/pyFAI-recalib   %i/bin/pyFAI-recalib-py%type_pkg[python]
  mv %i/bin/pyFAI-waxs      %i/bin/pyFAI-waxs-py%type_pkg[python]
  mv %i/bin/pyFAI-saxs      %i/bin/pyFAI-saxs-py%type_pkg[python]
  mv %i/bin/diff_tomo       %i/bin/diff_tomo-py%type_pkg[python]
  mv %i/bin/pyFAI-calib2    %i/bin/pyFAI-calib2-py%type_pkg[python]
  mv %i/bin/check_calib     %i/bin/check_calib-py%type_pkg[python]
  mv %i/bin/pyFAI-integrate %i/bin/pyFAI-integrate-py%type_pkg[python]
  mv %i/bin/MX-calibrate    %i/bin/MX-calibrate-py%type_pkg[python]
  mv %i/bin/detector2nexus  %i/bin/detector2nexus-py%type_pkg[python]
  mv %i/bin/pyFAI-benchmark %i/bin/pyFAI-benchmark-py%type_pkg[python]
  mv %i/bin/pyFAI-drawmask  %i/bin/pyFAI-drawmask-py%type_pkg[python]
  mv %i/bin/eiger-mask      %i/bin/eiger-mask-py%type_pkg[python]
  mv %i/bin/pyFAI-average   %i/bin/pyFAI-average-py%type_pkg[python]
  mv %i/bin/pyFAI-calib     %i/bin/pyFAI-calib-py%type_pkg[python]
<<

DocFiles: <<
  copyright
  PKG-INFO
  README.rst
<<

InfoTest: <<
#  TestDepends: scipy-py%type_pkg[python]
#  TestScript: p/bin/python%type_raw[python] setup.py test || exit 2
<<

Description: Fast azimuthal integration
DescDetail: <<
pyFAI is an azimuthal integration library that tries to be fast (as fast as
C and even more using OpenCL and GPU).  It is based on histogramming of the
2theta/Q positions of each (center of) pixel weighted by the intensity of
each pixel, but parallel version uses a SparseMatrix-DenseVector
multiplication.  Neighboring output bins get also a contribution of pixels
next to the border thanks to pixel splitting.  Finally pyFAI provides also
tools to calibrate the experimental setup using Debye-Scherrer rings of a
reference compound.
<<

Homepage: https://github.com/silx-kit/pyFAI
Maintainer: Karl-Michael Schindler <karl-michael.schindler@web.de>
# Info2
<<
